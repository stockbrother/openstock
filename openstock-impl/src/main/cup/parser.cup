/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
import java_cup.runtime.*;
import daydayup.openstock.cup.CupExpr;

parser code {:
    // Connect this parser to a scanner!
    protected scanner s;
    public parser(scanner s){ this.s=s; }
:}

// define how to connect to the scanner!
init with {: 
	// s.init(); 
:};

scan with {: 
	return s.next_token(); 
:};

// Terminals (tokens returned by the scanner). 
terminal            PLUS, MINUS, TIMES, DIV, LPAREN, RPAREN, AT;
terminal Integer    NUMBER;        // our scanner provides numbers
terminal String     IDENTIFIER;
// Non terminals 
non terminal CupExpr    expr;      // used to store evaluated subexpressions

// Precedences 
precedence left PLUS, MINUS;
precedence left TIMES;
precedence left DIV;
precedence left AT;

// The grammar rules
expr ::= expr:e1 PLUS expr:e2      	    {: /*System.out.println(e1+"+"+e2);*/RESULT = CupExpr.plus(e1,e2);       :}
	| expr:e1 MINUS expr:e2        	    {: /*System.out.println(e1+"-"+e2);*/RESULT = CupExpr.minus(e1,e2);       :}
	| expr:e1 TIMES expr:e2        	    {: /*System.out.println(e1+"*"+e2);*/RESULT = CupExpr.times(e1,e2);       :}
	| expr:e1 DIV expr:e2          	    {: /*System.out.println(e1+"*"+e2);*/RESULT = CupExpr.div(e1,e2);        :}
	| MINUS expr:e                 	    {: /*System.out.println("-"+e);*/RESULT = CupExpr.minus(e);              :}
	| LPAREN expr:e RPAREN	            {: /*System.out.println("("+e+")");*/RESULT = CupExpr.paren(e);           :}
	| NUMBER:n	                        {: /*System.out.println(n); */RESULT = CupExpr.number(n);           :}	
	| IDENTIFIER:id AT IDENTIFIER:date   {: /*System.out.println(""+id+"@"+date);*/RESULT = CupExpr.index(id,date);          :}  	     
	
;